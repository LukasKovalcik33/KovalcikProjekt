// Ziskanie ID a hesla pre pripojenie k WIFI
#include "arduino_secrets.h"

/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/c3aa4a51-1f80-4fac-9e25-39c57b667521 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float humidity;
  float temperature;
  int moisture;
  int moistureLimit;
  bool waterPumpOn;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
#include "thingProperties.h"

#include "DHT.h"                      // Senzor teploty a vlhkosti vzduchu
#include <Arduino.h>                  // Arduino Cloud
#include <U8x8lib.h>                  // Displej
#ifdef U8X8_HAVE_HW_SPI
#include <SPI.h>                      // Displej
#endif


// Definicie: DHT senzor
#define DHTPIN              6         // Pin, z ktoreho sa citaju data o teplote a vlhkosti
#define DHTTYPE             DHT22     // Identifikator pouyiteho senzora

#define PUMP_CONTROL_DOUT   8         // Digitalny pin, pomocou ktoreho sa pusta rele s vodnou pumpou
#define RELAY_ON            LOW       // Rele sa zapne, ak je pin nastaveny na LOW
#define RELAY_OFF           HIGH      // Rele sa rozopne, ak je pin nastaveny na HIGH


// Inicializacia kniznice: DHT
DHT dht(DHTPIN, DHTTYPE);

// Inicializacia kniznice: U8g2
U8X8_SH1106_128X64_NONAME_HW_I2C u8x8(/* reset=*/ U8X8_PIN_NONE);


// Konstanty: vlhka / sucha hlina
const int dry = 690;
const int wet = 260;

// Premenne non-blocking pauzy v loop procedure
unsigned long previousMillis = 0;
const long interval = 2000;           // uvedene v milisekudach

// Priznak na vypis nadpisov
bool writeTitles = true;


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Konfiguracia displeja  
  u8x8.begin();
  u8x8.setPowerSave(0);

  // Vypis uvodnu obrzovku
  u8x8.setFont(u8x8_font_amstrad_cpc_extended_f);
  u8x8.setInverseFont(0);
  u8x8.setCursor(4,4);
  u8x8.print("Init ...");

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  // Spustenie merania teploty a vlhkosti vzduchu
  dht.begin();

  // Nakonfiguruj prislusny digitalny pin a inicialne vypni zalievanie
  digitalWrite(PUMP_CONTROL_DOUT, RELAY_OFF);
  pinMode(PUMP_CONTROL_DOUT, OUTPUT);
  waterPumpOn = false;
}

void loop() {
  unsigned long currentMillis = millis();

  // Posli aktualne hodnoty premennych do Arduino cloud
  ArduinoCloud.update();
  
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    // Odcitaj zo senzora templotu a vlhkost vzduchu
    float airT = dht.readTemperature();
    float airH = dht.readHumidity();


    // Odcitaj vlhkost hliny v kvetinaci (pomocou dedikovaneho senzora vlhkosti hliny)
    int flowerHVal = analogRead(A0);
    flowerHVal = (flowerHVal >= wet) ? flowerHVal : wet; 
    flowerHVal = (flowerHVal <= dry) ? flowerHVal : dry;

    // Skontroluj, ci sa podarilo nacitat hodnoty zo senzorov vzduchu 
    if (isnan(airH) || isnan(airT)) {
      // Nastav na 0
      airH = 0;
      airT = 0;
    }
    if (isnan(flowerHVal)) {
      // Zastav pumpu a nastav prislusny priznak, pre istotu.
      digitalWrite(PUMP_CONTROL_DOUT, RELAY_OFF);
      waterPumpOn = false;
    }

    // Skonvertuj ciselnu hodnotu senzora vlhkosti hliny na percento
    int flowerH = map(flowerHVal, wet, dry, 100, 0);

    // Aktualizuj premenne pre cloud
    temperature = airT;
    humidity = airH;
    moisture = flowerH;

    // Zisti z cloud-u hodnotu minimanej akceptovanej vlhkosti v kvetinaci.
    // Ak je aktualna vlhkost nizsia ako minimalna akceptovana, pusti vodnu pumpu.
    if (isnan(moistureLimit)) {
        Serial.print("Cakam na nacitanie hodnoty minimalnej akceptovanej vlhkosti v kvetinaci z cloud-u.");
    } else {
      if (flowerH < moistureLimit) {
        // Pusti pumpu a nastav prislusny priznak
        digitalWrite(PUMP_CONTROL_DOUT, RELAY_ON);
        waterPumpOn = true;
      } else if (waterPumpOn) {
        // Zastav pumpu a nastav prislusny priznak
        digitalWrite(PUMP_CONTROL_DOUT, RELAY_OFF);
        waterPumpOn = false;
      }
    }

    // Ak je to pozadovane, vykresli nadpisy
    if (writeTitles) {
      writeTitlesToScreen();

      // Nadpisy vykresli len 1 krat
      writeTitles = false;
    }

    // Nastav font a zrus inverziu pozadia 
    u8x8.setFont(u8x8_font_amstrad_cpc_extended_f);
    u8x8.setInverseFont(0);

    // Vlhkost
    u8x8.setCursor(0,1);
    u8x8.print(String(airH,1) + " %");

    // Teplota
    u8x8.setCursor(8,1);
    u8x8.print(String(airT,1) + " \xb0" + "C");

    // Zavlaha v kvetinaci
    u8x8.setCursor(0,5);
    u8x8.print(String(flowerH) + " % ");
   
    // Limit zavlahy v kvetinaci
    u8x8.setCursor(0,6);

    // Nevzpisuj hodnotu limitu, ak este nie je dotiahnuta z cloud-u
    if (!isnan(moistureLimit)) {
      u8x8.print(String(moistureLimit) + " % ");
    }

    // Stav zapnutia vodnej pumpy
    u8x8.setCursor(8,5);

    // Otestuj, ci je vodna pumpa zapnuta
    if (waterPumpOn) {
      u8x8.print("on ");
    } else {
      u8x8.print("off");
    }
  }
}

void writeTitlesToScreen() {
  // Vycisti display
  u8x8.clearDisplay();

  // Nastav font a inverziu pozadia na blelu
  u8x8.setFont(u8x8_font_5x7_r);
  u8x8.setInverseFont(1);
  
  // Vypis nadpisy
  u8x8.drawString(0,0,"Hmdt:  ");
  u8x8.drawString(8,0,"Temp:  ");
  u8x8.drawString(0,4,"Mstr:  ");
  u8x8.drawString(8,4,"Pump:  ");
}

void writeError(float *airT, float *airH, int *flowerHVal) {
  // Vycisti display
  u8x8.clearDisplay();

  // Vypis chybovz stav
  u8x8.setFont(u8x8_font_amstrad_cpc_extended_f);
  u8x8.setInverseFont(0);
  u8x8.setCursor(0,4);
  u8x8.setInverseFont(1);
  u8x8.print("     Error:     ");

  u8x8.setInverseFont(0);

  // Teplota vzduchu
  u8x8.setCursor(0,5);
  isnan(*airT) ? u8x8.print("err") : u8x8.print("ok");

  // Vlhkost vzduchu
  u8x8.setCursor(7,5);
  isnan(*airH) ? u8x8.print("err") : u8x8.print("ok");

  // Vlhkost kvetinaca
  u8x8.setCursor(13,5);
  isnan(*flowerHVal) ? u8x8.print("err") : u8x8.print("ok");
}

/*
  Since MoistureLimit is READ_WRITE variable, onMoistureLimitChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMoistureLimitChange()  {
  Serial.print("Hodnot minimalnej vlhkosti kvetinaca zmenena na: " + String(moistureLimit));
}



